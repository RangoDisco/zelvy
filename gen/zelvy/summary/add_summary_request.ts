// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zelvy/summary/add_summary_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AddSummaryMetricRequest } from "../metric/add_summary_metric_request";
import { WorkoutInputModel } from "../workout/workout_input_model";

export const protobufPackage = "zelvy.summary";

export interface AddSummaryRequest {
  metrics: AddSummaryMetricRequest[];
  workouts: WorkoutInputModel[];
}

function createBaseAddSummaryRequest(): AddSummaryRequest {
  return { metrics: [], workouts: [] };
}

export const AddSummaryRequest: MessageFns<AddSummaryRequest> = {
  encode(message: AddSummaryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.metrics) {
      AddSummaryMetricRequest.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.workouts) {
      WorkoutInputModel.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddSummaryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSummaryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metrics.push(AddSummaryMetricRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.workouts.push(WorkoutInputModel.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSummaryRequest {
    return {
      metrics: globalThis.Array.isArray(object?.metrics)
        ? object.metrics.map((e: any) => AddSummaryMetricRequest.fromJSON(e))
        : [],
      workouts: globalThis.Array.isArray(object?.workouts)
        ? object.workouts.map((e: any) => WorkoutInputModel.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AddSummaryRequest): unknown {
    const obj: any = {};
    if (message.metrics?.length) {
      obj.metrics = message.metrics.map((e) => AddSummaryMetricRequest.toJSON(e));
    }
    if (message.workouts?.length) {
      obj.workouts = message.workouts.map((e) => WorkoutInputModel.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSummaryRequest>, I>>(base?: I): AddSummaryRequest {
    return AddSummaryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSummaryRequest>, I>>(object: I): AddSummaryRequest {
    const message = createBaseAddSummaryRequest();
    message.metrics = object.metrics?.map((e) => AddSummaryMetricRequest.fromPartial(e)) || [];
    message.workouts = object.workouts?.map((e) => WorkoutInputModel.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
