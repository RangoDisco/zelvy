// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zelvy/summary/get_summary_response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GoalViewModel } from "../goal/goal_view_model";
import { GetSummaryUserResponse } from "../user/get_summary_user_response";
import { WorkoutViewModel } from "../workout/workout_view_model";

export const protobufPackage = "zelvy.summary";

export interface GetSummaryResponse {
  id: string;
  day: string;
  goals: GoalViewModel[];
  workouts: WorkoutViewModel[];
  winner: GetSummaryUserResponse | undefined;
}

function createBaseGetSummaryResponse(): GetSummaryResponse {
  return { id: "", day: "", goals: [], workouts: [], winner: undefined };
}

export const GetSummaryResponse: MessageFns<GetSummaryResponse> = {
  encode(message: GetSummaryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.day !== "") {
      writer.uint32(18).string(message.day);
    }
    for (const v of message.goals) {
      GoalViewModel.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.workouts) {
      WorkoutViewModel.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.winner !== undefined) {
      GetSummaryUserResponse.encode(message.winner, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSummaryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.day = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.goals.push(GoalViewModel.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.workouts.push(WorkoutViewModel.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.winner = GetSummaryUserResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSummaryResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      day: isSet(object.day) ? globalThis.String(object.day) : "",
      goals: globalThis.Array.isArray(object?.goals) ? object.goals.map((e: any) => GoalViewModel.fromJSON(e)) : [],
      workouts: globalThis.Array.isArray(object?.workouts)
        ? object.workouts.map((e: any) => WorkoutViewModel.fromJSON(e))
        : [],
      winner: isSet(object.winner) ? GetSummaryUserResponse.fromJSON(object.winner) : undefined,
    };
  },

  toJSON(message: GetSummaryResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.day !== "") {
      obj.day = message.day;
    }
    if (message.goals?.length) {
      obj.goals = message.goals.map((e) => GoalViewModel.toJSON(e));
    }
    if (message.workouts?.length) {
      obj.workouts = message.workouts.map((e) => WorkoutViewModel.toJSON(e));
    }
    if (message.winner !== undefined) {
      obj.winner = GetSummaryUserResponse.toJSON(message.winner);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSummaryResponse>, I>>(base?: I): GetSummaryResponse {
    return GetSummaryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSummaryResponse>, I>>(object: I): GetSummaryResponse {
    const message = createBaseGetSummaryResponse();
    message.id = object.id ?? "";
    message.day = object.day ?? "";
    message.goals = object.goals?.map((e) => GoalViewModel.fromPartial(e)) || [];
    message.workouts = object.workouts?.map((e) => WorkoutViewModel.fromPartial(e)) || [];
    message.winner = (object.winner !== undefined && object.winner !== null)
      ? GetSummaryUserResponse.fromPartial(object.winner)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
