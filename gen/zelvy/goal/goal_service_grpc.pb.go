// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: zelvy/goal/goal_service.proto

package goal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoalServiceClient is the client API for GoalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoalServiceClient interface {
	DisableGoals(ctx context.Context, in *DisableGoalsRequest, opts ...grpc.CallOption) (*DisableGoalsResponse, error)
}

type goalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoalServiceClient(cc grpc.ClientConnInterface) GoalServiceClient {
	return &goalServiceClient{cc}
}

func (c *goalServiceClient) DisableGoals(ctx context.Context, in *DisableGoalsRequest, opts ...grpc.CallOption) (*DisableGoalsResponse, error) {
	out := new(DisableGoalsResponse)
	err := c.cc.Invoke(ctx, "/zelvy.goal.GoalService/DisableGoals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoalServiceServer is the server API for GoalService service.
// All implementations must embed UnimplementedGoalServiceServer
// for forward compatibility
type GoalServiceServer interface {
	DisableGoals(context.Context, *DisableGoalsRequest) (*DisableGoalsResponse, error)
	mustEmbedUnimplementedGoalServiceServer()
}

// UnimplementedGoalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoalServiceServer struct {
}

func (UnimplementedGoalServiceServer) DisableGoals(context.Context, *DisableGoalsRequest) (*DisableGoalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableGoals not implemented")
}
func (UnimplementedGoalServiceServer) mustEmbedUnimplementedGoalServiceServer() {}

// UnsafeGoalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoalServiceServer will
// result in compilation errors.
type UnsafeGoalServiceServer interface {
	mustEmbedUnimplementedGoalServiceServer()
}

func RegisterGoalServiceServer(s grpc.ServiceRegistrar, srv GoalServiceServer) {
	s.RegisterService(&GoalService_ServiceDesc, srv)
}

func _GoalService_DisableGoals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableGoalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).DisableGoals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zelvy.goal.GoalService/DisableGoals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).DisableGoals(ctx, req.(*DisableGoalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoalService_ServiceDesc is the grpc.ServiceDesc for GoalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zelvy.goal.GoalService",
	HandlerType: (*GoalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DisableGoals",
			Handler:    _GoalService_DisableGoals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zelvy/goal/goal_service.proto",
}
