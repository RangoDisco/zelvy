// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zelvy/user/user_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { AddUserRequest } from "./add_user_request";
import { AddUserResponse } from "./add_user_response";

export const protobufPackage = "zelvy.user";

export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  addUser: {
    path: "/zelvy.user.UserService/AddUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddUserRequest) => Buffer.from(AddUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddUserRequest.decode(value),
    responseSerialize: (value: AddUserResponse) => Buffer.from(AddUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddUserResponse.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  addUser: handleUnaryCall<AddUserRequest, AddUserResponse>;
}

export interface UserServiceClient extends Client {
  addUser(
    request: AddUserRequest,
    callback: (error: ServiceError | null, response: AddUserResponse) => void,
  ): ClientUnaryCall;
  addUser(
    request: AddUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddUserResponse) => void,
  ): ClientUnaryCall;
  addUser(
    request: AddUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddUserResponse) => void,
  ): ClientUnaryCall;
}

export const UserServiceClient = makeGenericClientConstructor(
  UserServiceService,
  "zelvy.user.UserService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserServiceClient;
  service: typeof UserServiceService;
  serviceName: string;
};
