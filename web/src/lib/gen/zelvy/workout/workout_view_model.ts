// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zelvy/workout/workout_view_model.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "zelvy.workout";

export interface WorkoutViewModel {
  id: string;
  kcalBurned: number;
  activityType: string;
  name: string;
  duration: string;
  picto: string;
  doneAt: string;
}

function createBaseWorkoutViewModel(): WorkoutViewModel {
  return { id: "", kcalBurned: 0, activityType: "", name: "", duration: "", picto: "", doneAt: "" };
}

export const WorkoutViewModel: MessageFns<WorkoutViewModel> = {
  encode(message: WorkoutViewModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.kcalBurned !== 0) {
      writer.uint32(16).int64(message.kcalBurned);
    }
    if (message.activityType !== "") {
      writer.uint32(26).string(message.activityType);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.duration !== "") {
      writer.uint32(42).string(message.duration);
    }
    if (message.picto !== "") {
      writer.uint32(50).string(message.picto);
    }
    if (message.doneAt !== "") {
      writer.uint32(58).string(message.doneAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkoutViewModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkoutViewModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.kcalBurned = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.activityType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.duration = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.picto = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.doneAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkoutViewModel {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      kcalBurned: isSet(object.kcalBurned) ? globalThis.Number(object.kcalBurned) : 0,
      activityType: isSet(object.activityType) ? globalThis.String(object.activityType) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      duration: isSet(object.duration) ? globalThis.String(object.duration) : "",
      picto: isSet(object.picto) ? globalThis.String(object.picto) : "",
      doneAt: isSet(object.doneAt) ? globalThis.String(object.doneAt) : "",
    };
  },

  toJSON(message: WorkoutViewModel): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.kcalBurned !== 0) {
      obj.kcalBurned = Math.round(message.kcalBurned);
    }
    if (message.activityType !== "") {
      obj.activityType = message.activityType;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.duration !== "") {
      obj.duration = message.duration;
    }
    if (message.picto !== "") {
      obj.picto = message.picto;
    }
    if (message.doneAt !== "") {
      obj.doneAt = message.doneAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkoutViewModel>, I>>(base?: I): WorkoutViewModel {
    return WorkoutViewModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkoutViewModel>, I>>(object: I): WorkoutViewModel {
    const message = createBaseWorkoutViewModel();
    message.id = object.id ?? "";
    message.kcalBurned = object.kcalBurned ?? 0;
    message.activityType = object.activityType ?? "";
    message.name = object.name ?? "";
    message.duration = object.duration ?? "";
    message.picto = object.picto ?? "";
    message.doneAt = object.doneAt ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
