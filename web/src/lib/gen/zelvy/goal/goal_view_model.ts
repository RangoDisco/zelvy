// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: zelvy/goal/goal_view_model.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "zelvy.goal";

export interface GoalViewModel {
  name: string;
  value: number;
  displayValue: string;
  threshold: number;
  displayThreshold: string;
  isSuccessful: boolean;
  isOff: boolean;
  progression: number;
  picto: string;
}

function createBaseGoalViewModel(): GoalViewModel {
  return {
    name: "",
    value: 0,
    displayValue: "",
    threshold: 0,
    displayThreshold: "",
    isSuccessful: false,
    isOff: false,
    progression: 0,
    picto: "",
  };
}

export const GoalViewModel: MessageFns<GoalViewModel> = {
  encode(message: GoalViewModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value !== 0) {
      writer.uint32(17).double(message.value);
    }
    if (message.displayValue !== "") {
      writer.uint32(26).string(message.displayValue);
    }
    if (message.threshold !== 0) {
      writer.uint32(33).double(message.threshold);
    }
    if (message.displayThreshold !== "") {
      writer.uint32(42).string(message.displayThreshold);
    }
    if (message.isSuccessful !== false) {
      writer.uint32(48).bool(message.isSuccessful);
    }
    if (message.isOff !== false) {
      writer.uint32(56).bool(message.isOff);
    }
    if (message.progression !== 0) {
      writer.uint32(64).int64(message.progression);
    }
    if (message.picto !== "") {
      writer.uint32(74).string(message.picto);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GoalViewModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGoalViewModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.value = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.displayValue = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.threshold = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.displayThreshold = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isSuccessful = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isOff = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.progression = longToNumber(reader.int64());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.picto = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GoalViewModel {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      displayValue: isSet(object.displayValue) ? globalThis.String(object.displayValue) : "",
      threshold: isSet(object.threshold) ? globalThis.Number(object.threshold) : 0,
      displayThreshold: isSet(object.displayThreshold) ? globalThis.String(object.displayThreshold) : "",
      isSuccessful: isSet(object.isSuccessful) ? globalThis.Boolean(object.isSuccessful) : false,
      isOff: isSet(object.isOff) ? globalThis.Boolean(object.isOff) : false,
      progression: isSet(object.progression) ? globalThis.Number(object.progression) : 0,
      picto: isSet(object.picto) ? globalThis.String(object.picto) : "",
    };
  },

  toJSON(message: GoalViewModel): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    if (message.displayValue !== "") {
      obj.displayValue = message.displayValue;
    }
    if (message.threshold !== 0) {
      obj.threshold = message.threshold;
    }
    if (message.displayThreshold !== "") {
      obj.displayThreshold = message.displayThreshold;
    }
    if (message.isSuccessful !== false) {
      obj.isSuccessful = message.isSuccessful;
    }
    if (message.isOff !== false) {
      obj.isOff = message.isOff;
    }
    if (message.progression !== 0) {
      obj.progression = Math.round(message.progression);
    }
    if (message.picto !== "") {
      obj.picto = message.picto;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GoalViewModel>, I>>(base?: I): GoalViewModel {
    return GoalViewModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GoalViewModel>, I>>(object: I): GoalViewModel {
    const message = createBaseGoalViewModel();
    message.name = object.name ?? "";
    message.value = object.value ?? 0;
    message.displayValue = object.displayValue ?? "";
    message.threshold = object.threshold ?? 0;
    message.displayThreshold = object.displayThreshold ?? "";
    message.isSuccessful = object.isSuccessful ?? false;
    message.isOff = object.isOff ?? false;
    message.progression = object.progression ?? 0;
    message.picto = object.picto ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
